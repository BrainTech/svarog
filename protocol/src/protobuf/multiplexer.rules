#   PEERS 100-999 are plain peers


# peers 100-105 reserved

peer {
    type: 106
    name: "PYTHON_TEST_SERVER"
}

peer {
    type: 107
    name: "PYTHON_TEST_CLIENT"
}

peer {
    type: 108
    name: "LOG_STREAMER"
    is_passive: true
}

peer {
    type: 109
    name: "LOG_COLLECTOR"
}

peer {
    type: 110
    name: "EVENTS_COLLECTOR"
}

peer {
    type: 111
    name: "LOG_RECEIVER_EXAMPLE"
}

# peers 112 reserved

peer {
    type: 112
    name: "AMPLIFIER"
}

peer {
    type: 113
    name: "SIGNAL_CATCHER"
}

peer {
    type: 114
    name: "MONITOR"
}

peer {
    type: 115
    name: "HASHTABLE"
}

peer {
    type: 116
    name: "FILTER"
}

peer {
    type: 117
    name: "ANALYSIS"
}

peer {
    type: 118
    name: "LOGIC"
}
peer {
    type: 119
    name: "STREAM_RECEIVER"
}

peer {
    type: 120
    name: "DIODE"
}

peer {
    type: 121
    name: "DIODE_CATCHER"
}

peer {
    type: 122
    name: "SUPER_DIODE"
}

peer {
    type: 123
    name: "SIGNAL_STREAMER"
}

peer {
     type: 124
     name: "SIGNAL_SAVER"
}

peer {
     type: 125
     name: "SIGNAL_SAVER_CONTROL"
}

peer {
     type: 126
     name: "UGM"
}

peer {
     type: 127
     name: "PINGER"
}

peer {
     type: 128
     name: "TAGS_SENDER"
}

peer { 
     type: 129
     name: "TAGS_RECEIVER"
}

peer {
    type: 130
    name: "CALIBRATOR"
}
peer {
    type: 131
    name: "TAG_CATCHER"
}

peer {
     type: 132
     name: "AUTOSCALE_GENERATOR"
}

# packages and routing rules definitions
#
#   PACKAGES 1 - 99 reserved for Multiplexer meta packages
type {
    type: 1
    name: "PING"
    comment: "I'm alive packet; it never carries any significant message."
    to {
	peer: "PINGER"
        whom: ALL
    }
}

type {
    type: 2
    name: "CONNECTION_WELCOME"
    comment: "message interchange by peers just after connecting to each other"
}

type {
    type: 3
    name: "BACKEND_FOR_PACKET_SEARCH"
    comment: "message used by MX client in query() for finding a backend that would handle its request"
}

type {
    type: 4
    name: "HEARTBIT"
    comment: "packet to be sent by every peer on every channel when nothing sent through the given channel for certain period of time"
}

type {
    type: 5
    name: "DELIVERY_ERROR"
    comment: "packet could not be delivered to one or more recipients"
}

type {
    type: 99
    name: "MAX_MULTIPLEXER_META_PACKET"
    comment: "this only defines a constant"
}

# PACKAGES 100 - 999 normal package

# types 100-109 reserved

type {
    type: 110
    name: "PYTHON_TEST_REQUEST"
    to {
	peer: "PYTHON_TEST_SERVER"
    }
}

type {
    type: 111
    name: "PYTHON_TEST_RESPONSE"
}

type {
    type: 112
    name: "PICKLE_RESPONSE"
}

type {
    type: 113
    name: "REQUEST_RECEIVED"
    comment: "packet sent by the backend immediatelly after receiving a request and stright to the requesting peer"
}

type {
    type: 114
    name: "BACKEND_ERROR"
    comment: "packet sent by the backend when request handling function finishes and no packet response packet is sent"
}

type {
    type: 115
    name: "LOGS_STREAM"
    comment: "payload is LogEntriesMessage"
    to {
	peer: "LOG_COLLECTOR"
        whom: ALL
    }
    to {
	peer: "LOG_RECEIVER_EXAMPLE"
	whom: ALL
    }
}

type {
    type: 116
    name: "LOGS_STREAM_RESPONSE"
    # currently unused
}

type {
    type: 117
    name: "SEARCH_COLLECTED_LOGS_REQUEST"
    comment: "payload is SearchCollectedLogs; logs are returned in LogEntriesMessage"
    to {
	peer: "LOG_COLLECTOR"
	whom: ANY
    }
}

type {
    type: 118
    name: "SEARCH_COLLECTED_LOGS_RESPONSE"
}

# types 119-125 reserved

type {
    type: 126
    name: "REPLAY_EVENTS_REQUEST"
    comment: "this is a no-response request"
    to {
	peer: "EVENTS_COLLECTOR"
	whom: ANY
    }
}

# types 127-128 reserverd

type {
    type: 129
    name: "AMPLIFIER_SIGNAL_MESSAGE"
    to {
        peer: "FILTER"
        whom: ALL
    }  
 
    to {
	peer: "SIGNAL_SAVER"
	whom: ALL
    }
}

type {
    type: 130
    name: "FILTERED_SIGNAL_MESSAGE"
    to {
        peer: "SIGNAL_CATCHER"
        whom: ALL
    }
    to {
        peer: "SIGNAL_STREAMER"
        whom: ALL
    }
    
    to {
       peer: "AUTOSCALE_GENERATOR"
       whom: ALL
       }
}

type {
    type: 131
    name: "SIGNAL_CATCHER_REQUEST_MESSAGE"
    to {
        peer: "SIGNAL_CATCHER"
        whom: ANY
    }
}

type {
    type: 132
    name: "SIGNAL_CATCHER_RESPONSE_MESSAGE"
}

type {
    type: 133
    name: "DICT_GET_REQUEST_MESSAGE"
    to {
        peer: "HASHTABLE"
        whom: ANY
    }
}

type {
    type: 134
    name: "DICT_GET_RESPONSE_MESSAGE"
}

type {
    type: 135
    name: "DICT_SET_MESSAGE"
    to {
        peer: "HASHTABLE"
        whom: ALL
    }
}

type {
    type: 136
    name: "DECISION_MESSAGE"
    to {
        peer: "LOGIC"
        whom: ALL
    }
}

type {
    type: 137
    name: "DIODE_MESSAGE"
    to {
        peer: "DIODE_CATCHER"
        whom: ALL
    }
}

type {
    type: 138
    name: "DIODE_REQUEST"
    to {
        peer: "DIODE_CATCHER"
        whom: ANY
    }
}

type {
    type: 139
    name: "DIODE_RESPONSE"
}

type {
    type: 140
    name: "P300_DECISION_MESSAGE"
    to {
        peer: "LOGIC"
        whom: ALL
    }
}

type {
    type: 141
    name: "SSVEP_DECISION_MESSAGE"
    to {
        peer: "LOGIC"
        whom: ALL
    }
}
type {
    type: 142
    name: "SWITCH_MODE"
    to {
        peer: "SUPER_DIODE"
        whom: ALL
    }
}

type {
    type: 143
    name: "STREAMED_SIGNAL_MESSAGE"
    to {
        peer: "STREAM_RECEIVER"
        whom: ALL
    }
}

type {
    type: 144
    name: "SIGNAL_STREAMER_START"
    to {
        peer: "SIGNAL_STREAMER"
        whom: ALL
    }
}

type {
    type: 145
    name: "SIGNAL_STREAMER_STOP"
    to {
        peer: "SIGNAL_STREAMER"
        whom: ALL
    }
}

type {
    type: 146
    name: "SAMPLING_FREQUENCY"
    to {
        peer: "SIGNAL_STREAMER"
        whom: ALL
    }
}

type {
    type: 147
    name: "CALIBRATION"
    to {
        peer: "SIGNAL_STREAMER"
        whom: ALL
    }
}

type {
     type: 148
     name: "SIGNAL_SAVER_CONTROL_MESSAGE"
     to {
     	peer: "SIGNAL_SAVER"
	whom: ALL
	}
}


type {
    type: 149
    name: "UGM_UPDATE_MESSAGE"
    to {
        peer: "UGM"
        whom: ALL
    }
}

type {
     type: 150
     name: "TAG"
     to {
     	peer: "SIGNAL_SAVER"
	whom: ANY
	}
     to {
     	peer: "TAGS_RECEIVER"
	whom: ANY
	}
     to {
     	peer: "STREAM_RECEIVER"
	 whom: ANY
	}
}

type {
    type: 151
    name: "DIODE_UPDATE_MESSAGE"
    to {
        peer: "SUPER_DIODE"
        whom: ALL
    }
}

type {
    type: 152
    name: "TAG_CATCHER_REQUEST_MESSAGE"
    to {
        peer: "TAGS_RECEIVER"
        whom: ALL
    }
}
type {
    type: 153
    name: "TAG_CATCHER_RESPONSE_MESSAGE"
}
