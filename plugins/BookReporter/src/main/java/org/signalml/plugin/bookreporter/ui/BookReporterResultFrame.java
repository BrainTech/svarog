package org.signalml.plugin.bookreporter.ui;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.signalml.app.document.TagDocument;
import org.signalml.domain.tag.StyledTagSet;
import org.signalml.plugin.export.SignalMLException;

/**
 * @author piotr@develancer.pl
 */
public class BookReporterResultFrame extends javax.swing.JFrame {

	private static final int ONE_HEIGHT = 200;
	
	private final ArrayList<JFreeChart> charts;
	
	private StyledTagSet tags;
	
	/**
	 * Creates new form BookReporterResultFrame
	 */
	public BookReporterResultFrame() {
		initComponents();
		charts = new ArrayList<JFreeChart>();
		tags = null;
	}

	/**
	 * This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                menuToolBar = new javax.swing.JToolBar();
                jLabel1 = new javax.swing.JLabel();
                xSizeSpinner = new javax.swing.JSpinner();
                jLabel2 = new javax.swing.JLabel();
                ySizeSpinner = new javax.swing.JSpinner();
                jLabel3 = new javax.swing.JLabel();
                pngSaveButton = new javax.swing.JButton();
                tagsSaveButton = new javax.swing.JButton();
                chartPanelContainer = new javax.swing.JPanel();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
                setTitle("Book reporting result");

                menuToolBar.setFloatable(false);
                menuToolBar.setRollover(true);

                jLabel1.setForeground(java.awt.SystemColor.textInactiveText);
                jLabel1.setText("Save entire diagram ");
                menuToolBar.add(jLabel1);

                xSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(800), Integer.valueOf(1), null, Integer.valueOf(1)));
                xSizeSpinner.setMinimumSize(new java.awt.Dimension(70, 28));
                xSizeSpinner.setPreferredSize(new java.awt.Dimension(70, 28));
                menuToolBar.add(xSizeSpinner);

                jLabel2.setForeground(java.awt.SystemColor.textInactiveText);
                jLabel2.setText(" Ã— ");
                menuToolBar.add(jLabel2);

                ySizeSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(800), Integer.valueOf(1), null, Integer.valueOf(1)));
                ySizeSpinner.setMinimumSize(new java.awt.Dimension(70, 28));
                ySizeSpinner.setPreferredSize(new java.awt.Dimension(70, 28));
                menuToolBar.add(ySizeSpinner);

                jLabel3.setForeground(java.awt.SystemColor.textInactiveText);
                jLabel3.setText(" as ");
                menuToolBar.add(jLabel3);

                pngSaveButton.setText("PNG");
                pngSaveButton.setFocusable(false);
                pngSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                pngSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                pngSaveButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                pngSaveButtonActionPerformed(evt);
                        }
                });
                menuToolBar.add(pngSaveButton);

                tagsSaveButton.setText("tags");
                tagsSaveButton.setEnabled(false);
                tagsSaveButton.setFocusable(false);
                tagsSaveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
                tagsSaveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
                tagsSaveButton.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                tagsSaveButtonActionPerformed(evt);
                        }
                });
                menuToolBar.add(tagsSaveButton);

                chartPanelContainer.setBackground(java.awt.Color.white);
                chartPanelContainer.setLayout(new java.awt.GridLayout(0, 1));

                javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(menuToolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 656, Short.MAX_VALUE)
                        .addComponent(chartPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(menuToolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chartPanelContainer, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

        private void pngSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pngSaveButtonActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileFilter(new FileNameExtensionFilter("PNG images", "png"));
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File outputFile = fileChooser.getSelectedFile();
			if (outputFile != null) {
				BufferedImage image = this.generateBufferedImage();
				try {
					ImageIO.write(image, "png", outputFile);
					JOptionPane.showMessageDialog(this, "Image was saved successfully!", "Image saved to file", JOptionPane.INFORMATION_MESSAGE);
				} catch (IOException ex) {
					JOptionPane.showMessageDialog(this, ex.getMessage(), "Error saving image", JOptionPane.ERROR_MESSAGE);
				}
			}
		}
        }//GEN-LAST:event_pngSaveButtonActionPerformed

        private void tagsSaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagsSaveButtonActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileFilter(new FileNameExtensionFilter("tag files", "tag"));
		if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File outputFile = fileChooser.getSelectedFile();
			if (outputFile != null) {
				try {
					TagDocument document = new TagDocument(tags);
					try {
						document.setBackingFile(outputFile);
						document.saveDocument();
						JOptionPane.showMessageDialog(this, "Tags were saved successfully!", "Tags saved to file", JOptionPane.INFORMATION_MESSAGE);
					} catch (IOException ex) {
						JOptionPane.showMessageDialog(this, ex.getMessage(), "Error saving tags", JOptionPane.ERROR_MESSAGE);
					}
				} catch (SignalMLException ex) {
					JOptionPane.showMessageDialog(this, ex.getMessage(), "Error processing tags", JOptionPane.ERROR_MESSAGE);
				}
			}
		}
        }//GEN-LAST:event_tagsSaveButtonActionPerformed

	public void addChartToPanel(JFreeChart chart) {
		chart.setBackgroundPaint(Color.WHITE);
		ChartPanel chartPanel = new ChartPanel(chart);
		chartPanelContainer.add(chartPanel);
		charts.add(chart);
		ySizeSpinner.setValue(new Integer(charts.size() * ONE_HEIGHT));
	}
	
	public void setTags(StyledTagSet tags) {
		this.tags = tags;
		tagsSaveButton.setEnabled(this.tags != null);
	}
	
	private BufferedImage generateBufferedImage() {
		int xSize = (Integer) xSizeSpinner.getValue();
		int ySize = (Integer) ySizeSpinner.getValue();
		
		BufferedImage image = new BufferedImage(xSize, ySize, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphics = image.createGraphics();
		for (int i=0; i<charts.size(); ++i) {
			JFreeChart chart = charts.get(i);
			int top = (i * ySize) / charts.size();
			int bottom = ((i+1) * ySize) / charts.size();
			chart.draw(graphics, new Rectangle(
				0, top, xSize, bottom-top
			));
		}
		return image;
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JPanel chartPanelContainer;
        private javax.swing.JLabel jLabel1;
        private javax.swing.JLabel jLabel2;
        private javax.swing.JLabel jLabel3;
        private javax.swing.JToolBar menuToolBar;
        private javax.swing.JButton pngSaveButton;
        private javax.swing.JButton tagsSaveButton;
        private javax.swing.JSpinner xSizeSpinner;
        private javax.swing.JSpinner ySizeSpinner;
        // End of variables declaration//GEN-END:variables
}
