/* LowPassSampleFilter.java created 2008-02-01 modified 2010-08-24
 * 
 */

package org.signalml.domain.montage.filter.predefined;

import org.signalml.domain.montage.filter.SampleFilterDefinition;
import org.signalml.domain.montage.filter.TimeDomainSampleFilter;

import com.thoughtworks.xstream.annotations.XStreamAlias;

/** LowPassSampleFilter
 *
 * 
 * @author Michal Dobaczewski &copy; 2007-2008 CC Otwarte Systemy Komputerowe Sp. z o.o.
 */
@XStreamAlias("lowpassfilter")
public class LowPassSampleFilter extends TimeDomainSampleFilter {

	private static final long serialVersionUID = 1L;
	
	public LowPassSampleFilter() {

		messageCodes = new String[] { "sampleFilter.td.lowPass" };
		effectCodes = new String[] { "sampleFilter.td.lowPassEffect" };
		defaultEffectDescription = "0-2 Hz";

                /*kwinta*
                 * >>> b,a=signal.iirdesign(wp=0.1875,ws=0.375,gstop=30, gpass=3,ftype='butter')

                 *
                 */

                aCoefficients=new double[]{
1.000000000000000000000000000000000000000000000000000000000000000000,
-2.917786697204184154230688363895751535892486572265625000000000000000,
3.681424675604834106934504234232008457183837890625000000000000000000,
-2.434258561933403619548244023462757468223571777343750000000000000000,
0.834778314581329006216492416569963097572326660156250000000000000000,
-0.117863783663858107120248064347833860665559768676757812500000000000

                };

                bCoefficients=new double[]{
0.001446685855772459044360500612924624874722212553024291992187500000,
0.007233429278862292186036420105210709152743220329284667968750000000,
0.014466858557724586106796316187228512717410922050476074218750000000,
0.014466858557724586106796316187228512717410922050476074218750000000,
0.007233429278862292186036420105210709152743220329284667968750000000,
0.001446685855772459044360500612924624874722212553024291992187500000
                };



  /* lowpass 

   >>> b,a=signal.iirdesign(wp=0.250,ws=0.5,gstop=30,gpass=3,ftype='butter')


                aCoefficients=new double[]{
1.000000000000000000000000000000000000000000000000000000000000000000,
-1.935805651933490301175311287806835025548934936523437500000000000000,
1.693960717112358738134503255423624068498611450195312500000000000000,
-0.701840420873030335080500208277953788638114929199218750000000000000,
0.116041314230815761909809680219041183590888977050781250000000000000

};



bCoefficients=new double[]{
0.010772247408540885568739575717245315900072455406188964843750000000,
0.043088989634163549213852206776209641247987747192382812500000000000,
0.064633484451245309942990502349857706576585769653320312500000000000,
0.043088989634163549213852206776209641247987747192382812500000000000,
0.010772247408540885568739575717245315900072455406188964843750000000
};
*/

                /*a,b were generated in python;
                        wp=2Hz, ws=4Hz
                b,a = signal.iirdesign(wp = 0.0625, ws=0.125 , gstop= 30, gpass=3, ftype=butter)
                 

                aCoefficients=new double[]{
                1.000000000000000000000000000000000000000000000000000000000000,
                -4.357143726284558482575448579154908657073974609375000000000000,
                7.630384157448907522791614610468968749046325683593750000000000,
                -6.710226111950030158936897350940853357315063476562500000000000,
                2.962152618150947436248543453984893858432769775390625000000000,
                -0.524938519332786790450029457133496180176734924316406250000000
                };

                bCoefficients=new double[]{
                0.000007138063515025385789001567682365845257663750089704990387,
                0.000035690317575126913698414787834423123058513738214969635010,
                0.000071380635150253840949356731737651671210187487304210662842,
                0.000071380635150253840949356731737651671210187487304210662842,
                0.000035690317575126913698414787834423123058513738214969635010,
                0.000007138063515025385789001567682365845257663750089704990387
                };
*/
		margin = aCoefficients.length * 4;
			
	}
	
	@Override
	public SampleFilterDefinition duplicate() {
		LowPassSampleFilter duplicate = new LowPassSampleFilter();
		duplicate.passCount = passCount;
		return duplicate;
	}		
	
}
