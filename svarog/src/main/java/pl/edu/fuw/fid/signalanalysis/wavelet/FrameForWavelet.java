package pl.edu.fuw.fid.signalanalysis.wavelet;

import pl.edu.fuw.fid.signalanalysis.waveform.ImageChart;
import pl.edu.fuw.fid.signalanalysis.stft.*;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.util.Random;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.jfree.chart.ChartPanel;
import org.signalml.app.view.book.wignermap.WignerMapPalette;
import pl.edu.fuw.fid.signalanalysis.SingleSignal;
import pl.edu.fuw.fid.signalanalysis.waveform.ImageChartPanel;
import pl.edu.fuw.fid.signalanalysis.waveform.ImageChartPanelListener;
import pl.edu.fuw.fid.signalanalysis.waveform.SignalChart;
import pl.edu.fuw.fid.signalanalysis.NonInteractiveChartPanel;
import pl.edu.fuw.fid.signalanalysis.waveform.TimeFrequency;

/**
 * User interface for interactive wavelet transform.
 *
 * @author ptr@mimuw.edu.pl
 */
public class FrameForWavelet extends javax.swing.JFrame {

	private static final double MIN_FREQUENCY = 2.0;

	private boolean initialized = false;

	/**
	 * Creates new form FrameForSTFT
	 */
	public FrameForWavelet() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		settingsPanel = new javax.swing.JPanel();
		windowPanel = new javax.swing.JPanel();
		waveletTypeComboBox = new javax.swing.JComboBox<>();
		waveletTypeLabel = new javax.swing.JLabel();
		waveletWidthLabel = new javax.swing.JLabel();
		waveletWidthSlider = new javax.swing.JSlider();
		frequencyPanel = new javax.swing.JPanel();
		maxFrequencySlider = new javax.swing.JSlider();
		logScaleCheckBox = new javax.swing.JCheckBox();
		palettePanel = new javax.swing.JPanel();
		paletteComboBox = new javax.swing.JComboBox<>();
		invertCheckBox = new javax.swing.JCheckBox();
		mainPanel = new javax.swing.JPanel();
		mainSignalPanel = new javax.swing.JPanel();
		mainImagePanel = new javax.swing.JPanel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setTitle("Short-Time Fourier Transform");
		setMinimumSize(new java.awt.Dimension(600, 300));

		windowPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Window"));

		waveletTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Morlet", "Shannon", "Haar" }));

		waveletTypeLabel.setLabelFor(waveletTypeComboBox);
		waveletTypeLabel.setText("Type:");

		waveletWidthLabel.setText("Width:");

		waveletWidthSlider.setMajorTickSpacing(2);
		waveletWidthSlider.setMaximum(10);
		waveletWidthSlider.setMinimum(1);
		waveletWidthSlider.setMinorTickSpacing(1);
		waveletWidthSlider.setPaintLabels(true);
		waveletWidthSlider.setPaintTicks(true);
		waveletWidthSlider.setValue(4);

		javax.swing.GroupLayout windowPanelLayout = new javax.swing.GroupLayout(windowPanel);
		windowPanel.setLayout(windowPanelLayout);
		windowPanelLayout.setHorizontalGroup(
			windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(windowPanelLayout.createSequentialGroup()
				.addContainerGap()
				.addGroup(windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addComponent(waveletTypeLabel)
					.addComponent(waveletWidthLabel))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addGroup(windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addComponent(waveletTypeComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(waveletWidthSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addContainerGap())
		);
		windowPanelLayout.setVerticalGroup(
			windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(windowPanelLayout.createSequentialGroup()
				.addContainerGap()
				.addGroup(windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
					.addComponent(waveletTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
					.addComponent(waveletTypeLabel))
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addGroup(windowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addComponent(waveletWidthLabel)
					.addComponent(waveletWidthSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);

		frequencyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Max frequency (Hz)"));

		maxFrequencySlider.setMajorTickSpacing(10);
		maxFrequencySlider.setMaximum(64);
		maxFrequencySlider.setMinimum(2);
		maxFrequencySlider.setMinorTickSpacing(5);
		maxFrequencySlider.setValue(64);

		logScaleCheckBox.setText("log scale");

		javax.swing.GroupLayout frequencyPanelLayout = new javax.swing.GroupLayout(frequencyPanel);
		frequencyPanel.setLayout(frequencyPanelLayout);
		frequencyPanelLayout.setHorizontalGroup(
			frequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(frequencyPanelLayout.createSequentialGroup()
				.addContainerGap()
				.addGroup(frequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addGroup(frequencyPanelLayout.createSequentialGroup()
						.addGap(12, 12, 12)
						.addComponent(logScaleCheckBox)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addGroup(frequencyPanelLayout.createSequentialGroup()
						.addComponent(maxFrequencySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
						.addContainerGap())))
		);
		frequencyPanelLayout.setVerticalGroup(
			frequencyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(frequencyPanelLayout.createSequentialGroup()
				.addContainerGap()
				.addComponent(maxFrequencySlider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(logScaleCheckBox))
		);

		palettePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Palette"));

		paletteComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RAINBOW", "GRAYSCALE" }));

		invertCheckBox.setText("invert colours");

		javax.swing.GroupLayout palettePanelLayout = new javax.swing.GroupLayout(palettePanel);
		palettePanel.setLayout(palettePanelLayout);
		palettePanelLayout.setHorizontalGroup(
			palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(palettePanelLayout.createSequentialGroup()
				.addContainerGap()
				.addGroup(palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
					.addGroup(palettePanelLayout.createSequentialGroup()
						.addGap(12, 12, 12)
						.addComponent(invertCheckBox)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
					.addGroup(palettePanelLayout.createSequentialGroup()
						.addComponent(paletteComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addContainerGap())))
		);
		palettePanelLayout.setVerticalGroup(
			palettePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(palettePanelLayout.createSequentialGroup()
				.addContainerGap()
				.addComponent(paletteComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(invertCheckBox)
				.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);

		javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
		settingsPanel.setLayout(settingsPanelLayout);
		settingsPanelLayout.setHorizontalGroup(
			settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(frequencyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
			.addComponent(palettePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
			.addComponent(windowPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		settingsPanelLayout.setVerticalGroup(
			settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(settingsPanelLayout.createSequentialGroup()
				.addComponent(windowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(frequencyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
				.addComponent(palettePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
				.addContainerGap())
		);

		getContentPane().add(settingsPanel, java.awt.BorderLayout.LINE_START);

		mainSignalPanel.setMaximumSize(new java.awt.Dimension(2147483647, 100));
		mainSignalPanel.setMinimumSize(new java.awt.Dimension(0, 100));
		mainSignalPanel.setLayout(new java.awt.BorderLayout());

		mainImagePanel.setLayout(new java.awt.BorderLayout());

		javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
		mainPanel.setLayout(mainPanelLayout);
		mainPanelLayout.setHorizontalGroup(
			mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addComponent(mainImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
			.addComponent(mainSignalPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
		);
		mainPanelLayout.setVerticalGroup(
			mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
			.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
				.addComponent(mainImagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
				.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
				.addComponent(mainSignalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
		);

		getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(() -> {
			Random random = new Random();
			final double[] samples = random.doubles(1280).toArray();

			SingleSignal signal = new SingleSignal() {
				@Override
				public void getSamples(int start, int length, double[] buffer) {
					for (int i=0; i<length; ++i) {
						int j = start + i - 1280;
						buffer[i] = j>=0 && j<samples.length ? samples[j]-0.5 : 0.0;
					}
				}
				@Override
				public double getSamplingFrequency() {
					return 128.0;
				}
			};

			FrameForWavelet frame = new FrameForWavelet();
			frame.initialize(signal, 10.0, 20.0, 64.0);
			frame.setVisible(true);
		});
	}

	public void initialize(SingleSignal signal, double tMin, double tMax, double fMax) {
		if (initialized) {
			return;
		}
		initialized = true;

		int maxFrequency = (int) Math.round(fMax);
		maxFrequencySlider.setMaximum(maxFrequency);
		maxFrequencySlider.setValue(maxFrequency);

		ImageRendererForWavelet renderer = new ImageRendererForWavelet(signal);
		updatePalette(renderer);
		updateWaveletType(renderer);

		ImageChart imageChart = new ImageChart(renderer, tMin, tMax, MIN_FREQUENCY, fMax);
		final ImageChartPanel imagePanel = new ImageChartPanel(imageChart);
		imageChart.setOnComputationFinished(() -> {
			repaintChartPanel(imagePanel);
		});

		SignalChart signalChart = new SignalChart(signal, tMin, tMax);
		final ChartPanel signalPanel = new NonInteractiveChartPanel(signalChart);
		signalPanel.setMinimumDrawHeight(100);

		imagePanel.setListener(new ImageChartPanelListener() {
			@Override
			public void mouseExited() {
				signalChart.clearWaveform();
			}

			@Override
			public void mouseMoved(double dx, double dy) {
				MotherWavelet mv = renderer.getWavelet();
				TimeFrequency tf = renderer.getTimeFrequency(dx, dy);
				if (mv != null && tf != null) {
					signalChart.setWaveform(mv.scale(tf.f), null, tf.t, tf.v);
				}
			}
		});

		ChangeListener frequencyListener = (ChangeEvent ev) -> {
			boolean logScale = logScaleCheckBox.isSelected();
			imageChart.setMaxFrequency(maxFrequencySlider.getValue(), logScale);
			renderer.setLogScale(logScale);
			repaintChartPanel(imagePanel);
		};
		maxFrequencySlider.addChangeListener(frequencyListener);
		logScaleCheckBox.addChangeListener(frequencyListener);

		paletteComboBox.addActionListener((ActionEvent ev) -> {
			updatePalette(renderer);
			repaintChartPanel(imagePanel);
		});
		invertCheckBox.addChangeListener((ChangeEvent ev) -> {
			updatePalette(renderer);
			repaintChartPanel(imagePanel);
		});
		waveletTypeComboBox.addActionListener((ActionEvent ev) -> {
			updateWaveletType(renderer);
			repaintChartPanel(imagePanel);
		});
		waveletWidthSlider.addChangeListener((ChangeEvent ev) -> {
			updateWaveletType(renderer);
			repaintChartPanel(imagePanel);
		});

		mainImagePanel.add(imagePanel, BorderLayout.CENTER);
		mainSignalPanel.add(signalPanel, BorderLayout.CENTER);
	}

	private void updatePalette(ImageRendererForWavelet renderer) {
		renderer.setPaletteType(WignerMapPalette.valueOf(paletteComboBox.getSelectedItem().toString()));
		renderer.setInverted(invertCheckBox.isSelected());
	}

	private void updateWaveletType(ImageRendererForWavelet renderer) {
		renderer.setWavelet(MotherWavelet.get(
			waveletTypeComboBox.getSelectedItem().toString(),
			waveletWidthSlider.getValue()
		));
	}

	private void repaintChartPanel(ChartPanel chartPanel) {
		chartPanel.setRefreshBuffer(true);
		chartPanel.repaint();
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JPanel frequencyPanel;
	private javax.swing.JCheckBox invertCheckBox;
	private javax.swing.JCheckBox logScaleCheckBox;
	private javax.swing.JPanel mainImagePanel;
	private javax.swing.JPanel mainPanel;
	private javax.swing.JPanel mainSignalPanel;
	private javax.swing.JSlider maxFrequencySlider;
	private javax.swing.JComboBox<String> paletteComboBox;
	private javax.swing.JPanel palettePanel;
	private javax.swing.JPanel settingsPanel;
	private javax.swing.JComboBox<String> waveletTypeComboBox;
	private javax.swing.JLabel waveletTypeLabel;
	private javax.swing.JLabel waveletWidthLabel;
	private javax.swing.JSlider waveletWidthSlider;
	private javax.swing.JPanel windowPanel;
	// End of variables declaration//GEN-END:variables
}
